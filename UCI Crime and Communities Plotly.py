{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Explanation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- It is prepared using real data from socio-economic data from 1990 US Census and \n",
    "  crimedata from the 1995 FBI UCR\n",
    "- This dataset contains a total number of 147 attributes and 2216 instances."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The columns that we worked on"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- murders: number of murders in 1995 \n",
    "- murdPerPop: number of murders per 100K population \n",
    "- rapes: number of rapes in 1995 \n",
    "- rapesPerPop: number of rapes per 100K population \n",
    "- robberies: number of robberies in 1995 \n",
    "- robbbPerPop: number of robberies per 100K population\n",
    "- assaults: number of assaults in 1995 \n",
    "- assaultPerPop: number of assaults per 100K population \n",
    "- burglaries: number of burglaries in 1995 \n",
    "- burglPerPop: number of burglaries per 100K population \n",
    "- larcenies: number of larcenies in 1995 \n",
    "- larcPerPop: number of larcenies per 100K population \n",
    "- autoTheftPerPop: number of auto thefts per 100K population \n",
    "- arsons: number of arsons in 1995 (num\n",
    "- ViolentCrimesPerPop: total number of violent crimes per 100K popuation \n",
    "- nonViolPerPop: total number of non-violent crimes per 100K popuation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Liberaries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install dash"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First, install the necessary packages\n",
    "import subprocess\n",
    "import sys\n",
    "\n",
    "def install(package):\n",
    "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n",
    "\n",
    "# Install dash and related components\n",
    "install('dash')\n",
    "install('dash-bootstrap-components')\n",
    "install('plotly')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_bootstrap_components as dbc\n",
    "import dash_html_components as html\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "import json\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "from plotly.offline import init_notebook_mode,iplot\n",
    "from pandas.io.json import json_normalize\n",
    "import numpy as np\n",
    "import plotly.graph_objects as go\n",
    "from dash import Dash, dcc, html, Input, Output\n",
    "from dash import Dash, dcc, html\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "crimedata = pd.read_csv('crimedata.csv',sep='\\s*,\\s*',encoding='latin-1',engine='python',na_values=[\"?\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Handle nulls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Êcommunityname          0.00\n",
       "state                   0.00\n",
       "countyCode             55.12\n",
       "communityCode          55.26\n",
       "fold                    0.00\n",
       "                       ...  \n",
       "autoTheftPerPop         0.14\n",
       "arsons                  4.11\n",
       "arsonsPerPop            4.11\n",
       "ViolentCrimesPerPop     9.98\n",
       "nonViolPerPop           4.38\n",
       "Length: 147, dtype: float64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(crimedata.isnull().sum(axis=0)*100/crimedata.shape[0],2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Êcommunityname</th>\n",
       "      <th>state</th>\n",
       "      <th>countyCode</th>\n",
       "      <th>communityCode</th>\n",
       "      <th>fold</th>\n",
       "      <th>population</th>\n",
       "      <th>householdsize</th>\n",
       "      <th>racepctblack</th>\n",
       "      <th>racePctWhite</th>\n",
       "      <th>racePctAsian</th>\n",
       "      <th>...</th>\n",
       "      <th>burglaries</th>\n",
       "      <th>burglPerPop</th>\n",
       "      <th>larcenies</th>\n",
       "      <th>larcPerPop</th>\n",
       "      <th>autoTheft</th>\n",
       "      <th>autoTheftPerPop</th>\n",
       "      <th>arsons</th>\n",
       "      <th>arsonsPerPop</th>\n",
       "      <th>ViolentCrimesPerPop</th>\n",
       "      <th>nonViolPerPop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BerkeleyHeightstownship</td>\n",
       "      <td>NJ</td>\n",
       "      <td>39.0</td>\n",
       "      <td>5320.0</td>\n",
       "      <td>1</td>\n",
       "      <td>11980</td>\n",
       "      <td>3.10</td>\n",
       "      <td>1.37</td>\n",
       "      <td>91.78</td>\n",
       "      <td>6.50</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>114.85</td>\n",
       "      <td>138.0</td>\n",
       "      <td>1132.08</td>\n",
       "      <td>16.0</td>\n",
       "      <td>131.26</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16.41</td>\n",
       "      <td>41.02</td>\n",
       "      <td>1394.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Marpletownship</td>\n",
       "      <td>PA</td>\n",
       "      <td>45.0</td>\n",
       "      <td>47616.0</td>\n",
       "      <td>1</td>\n",
       "      <td>23123</td>\n",
       "      <td>2.82</td>\n",
       "      <td>0.80</td>\n",
       "      <td>95.57</td>\n",
       "      <td>3.44</td>\n",
       "      <td>...</td>\n",
       "      <td>57.0</td>\n",
       "      <td>242.37</td>\n",
       "      <td>376.0</td>\n",
       "      <td>1598.78</td>\n",
       "      <td>26.0</td>\n",
       "      <td>110.55</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.25</td>\n",
       "      <td>127.56</td>\n",
       "      <td>1955.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Tigardcity</td>\n",
       "      <td>OR</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>29344</td>\n",
       "      <td>2.43</td>\n",
       "      <td>0.74</td>\n",
       "      <td>94.33</td>\n",
       "      <td>3.43</td>\n",
       "      <td>...</td>\n",
       "      <td>274.0</td>\n",
       "      <td>758.14</td>\n",
       "      <td>1797.0</td>\n",
       "      <td>4972.19</td>\n",
       "      <td>136.0</td>\n",
       "      <td>376.30</td>\n",
       "      <td>22.0</td>\n",
       "      <td>60.87</td>\n",
       "      <td>218.59</td>\n",
       "      <td>6167.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Gloversvillecity</td>\n",
       "      <td>NY</td>\n",
       "      <td>35.0</td>\n",
       "      <td>29443.0</td>\n",
       "      <td>1</td>\n",
       "      <td>16656</td>\n",
       "      <td>2.40</td>\n",
       "      <td>1.70</td>\n",
       "      <td>97.35</td>\n",
       "      <td>0.50</td>\n",
       "      <td>...</td>\n",
       "      <td>225.0</td>\n",
       "      <td>1301.78</td>\n",
       "      <td>716.0</td>\n",
       "      <td>4142.56</td>\n",
       "      <td>47.0</td>\n",
       "      <td>271.93</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>306.64</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bemidjicity</td>\n",
       "      <td>MN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5068.0</td>\n",
       "      <td>1</td>\n",
       "      <td>11245</td>\n",
       "      <td>2.76</td>\n",
       "      <td>0.53</td>\n",
       "      <td>89.16</td>\n",
       "      <td>1.17</td>\n",
       "      <td>...</td>\n",
       "      <td>91.0</td>\n",
       "      <td>728.93</td>\n",
       "      <td>1060.0</td>\n",
       "      <td>8490.87</td>\n",
       "      <td>91.0</td>\n",
       "      <td>728.93</td>\n",
       "      <td>5.0</td>\n",
       "      <td>40.05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9988.79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 147 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Êcommunityname state  countyCode  communityCode  fold  population  \\\n",
       "0  BerkeleyHeightstownship    NJ        39.0         5320.0     1       11980   \n",
       "1           Marpletownship    PA        45.0        47616.0     1       23123   \n",
       "2               Tigardcity    OR         NaN            NaN     1       29344   \n",
       "3         Gloversvillecity    NY        35.0        29443.0     1       16656   \n",
       "4              Bemidjicity    MN         7.0         5068.0     1       11245   \n",
       "\n",
       "   householdsize  racepctblack  racePctWhite  racePctAsian  ...  burglaries  \\\n",
       "0           3.10          1.37         91.78          6.50  ...        14.0   \n",
       "1           2.82          0.80         95.57          3.44  ...        57.0   \n",
       "2           2.43          0.74         94.33          3.43  ...       274.0   \n",
       "3           2.40          1.70         97.35          0.50  ...       225.0   \n",
       "4           2.76          0.53         89.16          1.17  ...        91.0   \n",
       "\n",
       "   burglPerPop  larcenies  larcPerPop  autoTheft  autoTheftPerPop  arsons  \\\n",
       "0       114.85      138.0     1132.08       16.0           131.26     2.0   \n",
       "1       242.37      376.0     1598.78       26.0           110.55     1.0   \n",
       "2       758.14     1797.0     4972.19      136.0           376.30    22.0   \n",
       "3      1301.78      716.0     4142.56       47.0           271.93     NaN   \n",
       "4       728.93     1060.0     8490.87       91.0           728.93     5.0   \n",
       "\n",
       "   arsonsPerPop  ViolentCrimesPerPop  nonViolPerPop  \n",
       "0         16.41                41.02        1394.59  \n",
       "1          4.25               127.56        1955.95  \n",
       "2         60.87               218.59        6167.51  \n",
       "3           NaN               306.64            NaN  \n",
       "4         40.05                  NaN        9988.79  \n",
       "\n",
       "[5 rows x 147 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crimedata.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "crimedata.isnull().sum()\n",
    "sns.heatmap(crimedata.isnull(),cmap='viridis',cbar=False,yticklabels=False)\n",
    "\n",
    "plt.title('missing data')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "crimedata = crimedata.rename(columns={'Êcommunityname':'communityName'})\n",
    "cols = ['HousVacant','PctHousOccup','PctHousOwnOcc','PctVacantBoarded','PctVacMore6Mos','PctUnemployed','PctEmploy','murdPerPop','rapesPerPop','robbbPerPop','assaultPerPop','ViolentCrimesPerPop','burglPerPop','larcPerPop','autoTheftPerPop','arsonsPerPop','nonViolPerPop']\n",
    "crimedata.fillna(crimedata[cols].median(),inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>ViolentCrimesPerPop</th>\n",
       "      <th>nonViolPerPop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AK</td>\n",
       "      <td>576.576667</td>\n",
       "      <td>4961.673333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AL</td>\n",
       "      <td>1030.699070</td>\n",
       "      <td>5020.640233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AR</td>\n",
       "      <td>718.550400</td>\n",
       "      <td>6509.575600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AZ</td>\n",
       "      <td>551.094500</td>\n",
       "      <td>6532.186000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CA</td>\n",
       "      <td>808.905197</td>\n",
       "      <td>5139.440251</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  state  ViolentCrimesPerPop  nonViolPerPop\n",
       "0    AK           576.576667    4961.673333\n",
       "1    AL          1030.699070    5020.640233\n",
       "2    AR           718.550400    6509.575600\n",
       "3    AZ           551.094500    6532.186000\n",
       "4    CA           808.905197    5139.440251"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crimedata_state = crimedata.groupby('state').agg({'ViolentCrimesPerPop':'mean','nonViolPerPop':'mean'})[['ViolentCrimesPerPop','nonViolPerPop']].reset_index()\n",
    "crimedata_state.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8940193.0 [17199, 56289.0, 526826.0, 719015.0, 1683856.0, 4728436.0, 1142924.0, 65648.0]\n"
     ]
    }
   ],
   "source": [
    "type_of_criems=['murders', 'rapes', 'robberies', 'assaults', 'burglaries', 'larcenies', 'autoTheft', 'arsons']\n",
    "\n",
    "total_crimes=0\n",
    "crimes= []\n",
    "for i in type_of_criems:\n",
    "    total_crimes+=crimedata[i].sum()\n",
    "    x=crimedata[i].sum()\n",
    "    crimes.append(x)\n",
    "    \n",
    "print(total_crimes,crimes)\n",
    "total_crime='9M'   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "murders_percentage=(crimes[0]/total_crimes)*100\n",
    "rapes_percentage=(crimes[1]/total_crimes)*100\n",
    "robberies_percentage=(crimes[2]/total_crimes)*100\n",
    "assaults_percentage=(crimes[3]/total_crimes)*100\n",
    "burglaries_percentage=(crimes[4]/total_crimes)*100\n",
    "larcenies_percentage=(crimes[5]/total_crimes)*100\n",
    "autoTheft_percentage=(crimes[6]/total_crimes)*100\n",
    "arsons_percentage=(crimes[7]/total_crimes)*100\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>population</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11980</td>\n",
       "      <td>NJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>23123</td>\n",
       "      <td>PA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29344</td>\n",
       "      <td>OR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16656</td>\n",
       "      <td>NY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11245</td>\n",
       "      <td>MN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2210</th>\n",
       "      <td>56216</td>\n",
       "      <td>CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2211</th>\n",
       "      <td>12251</td>\n",
       "      <td>LA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2212</th>\n",
       "      <td>32824</td>\n",
       "      <td>CA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2213</th>\n",
       "      <td>13547</td>\n",
       "      <td>TX</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2214</th>\n",
       "      <td>28898</td>\n",
       "      <td>CA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2215 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      population state\n",
       "0          11980    NJ\n",
       "1          23123    PA\n",
       "2          29344    OR\n",
       "3          16656    NY\n",
       "4          11245    MN\n",
       "...          ...   ...\n",
       "2210       56216    CA\n",
       "2211       12251    LA\n",
       "2212       32824    CA\n",
       "2213       13547    TX\n",
       "2214       28898    CA\n",
       "\n",
       "[2215 rows x 2 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crimedata[['population','state']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bar1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the Crimes Precentage for each City?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>state</th>\n",
       "      <th>AK</th>\n",
       "      <th>AL</th>\n",
       "      <th>AR</th>\n",
       "      <th>AZ</th>\n",
       "      <th>CA</th>\n",
       "      <th>CO</th>\n",
       "      <th>CT</th>\n",
       "      <th>DC</th>\n",
       "      <th>DE</th>\n",
       "      <th>FL</th>\n",
       "      <th>...</th>\n",
       "      <th>TN</th>\n",
       "      <th>TX</th>\n",
       "      <th>UT</th>\n",
       "      <th>VA</th>\n",
       "      <th>VT</th>\n",
       "      <th>WA</th>\n",
       "      <th>WI</th>\n",
       "      <th>WV</th>\n",
       "      <th>WY</th>\n",
       "      <th>Crimes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>murders</th>\n",
       "      <td>29.0</td>\n",
       "      <td>326.0</td>\n",
       "      <td>142.0</td>\n",
       "      <td>248.0</td>\n",
       "      <td>3272.0</td>\n",
       "      <td>146.0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>454.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>560.0</td>\n",
       "      <td>...</td>\n",
       "      <td>303.0</td>\n",
       "      <td>1681.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>355.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>199.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>murders</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rapes</th>\n",
       "      <td>249.0</td>\n",
       "      <td>1046.0</td>\n",
       "      <td>636.0</td>\n",
       "      <td>1172.0</td>\n",
       "      <td>9065.0</td>\n",
       "      <td>1238.0</td>\n",
       "      <td>635.0</td>\n",
       "      <td>324.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>3056.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1351.0</td>\n",
       "      <td>6976.0</td>\n",
       "      <td>432.0</td>\n",
       "      <td>1173.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>1573.0</td>\n",
       "      <td>904.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>rapes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>robberies</th>\n",
       "      <td>651.0</td>\n",
       "      <td>5836.0</td>\n",
       "      <td>2565.0</td>\n",
       "      <td>5850.0</td>\n",
       "      <td>113334.0</td>\n",
       "      <td>3736.0</td>\n",
       "      <td>6269.0</td>\n",
       "      <td>7107.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>27216.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7631.0</td>\n",
       "      <td>25285.0</td>\n",
       "      <td>774.0</td>\n",
       "      <td>6627.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>5480.0</td>\n",
       "      <td>5409.0</td>\n",
       "      <td>573.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>robberies</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>assaults</th>\n",
       "      <td>1571.0</td>\n",
       "      <td>16086.0</td>\n",
       "      <td>7264.0</td>\n",
       "      <td>16200.0</td>\n",
       "      <td>148772.0</td>\n",
       "      <td>11341.0</td>\n",
       "      <td>5824.0</td>\n",
       "      <td>9003.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>47525.0</td>\n",
       "      <td>...</td>\n",
       "      <td>12477.0</td>\n",
       "      <td>49564.0</td>\n",
       "      <td>1633.0</td>\n",
       "      <td>8009.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>10825.0</td>\n",
       "      <td>3873.0</td>\n",
       "      <td>1165.0</td>\n",
       "      <td>365.0</td>\n",
       "      <td>assaults</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>burglaries</th>\n",
       "      <td>2259.0</td>\n",
       "      <td>30462.0</td>\n",
       "      <td>16317.0</td>\n",
       "      <td>45629.0</td>\n",
       "      <td>306585.0</td>\n",
       "      <td>25308.0</td>\n",
       "      <td>27516.0</td>\n",
       "      <td>11532.0</td>\n",
       "      <td>251.0</td>\n",
       "      <td>108475.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30235.0</td>\n",
       "      <td>168969.0</td>\n",
       "      <td>7964.0</td>\n",
       "      <td>24315.0</td>\n",
       "      <td>1048.0</td>\n",
       "      <td>34838.0</td>\n",
       "      <td>21077.0</td>\n",
       "      <td>4025.0</td>\n",
       "      <td>851.0</td>\n",
       "      <td>burglaries</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "state           AK       AL       AR       AZ        CA       CO       CT  \\\n",
       "murders       29.0    326.0    142.0    248.0    3272.0    146.0    195.0   \n",
       "rapes        249.0   1046.0    636.0   1172.0    9065.0   1238.0    635.0   \n",
       "robberies    651.0   5836.0   2565.0   5850.0  113334.0   3736.0   6269.0   \n",
       "assaults    1571.0  16086.0   7264.0  16200.0  148772.0  11341.0   5824.0   \n",
       "burglaries  2259.0  30462.0  16317.0  45629.0  306585.0  25308.0  27516.0   \n",
       "\n",
       "state            DC     DE        FL  ...       TN        TX      UT       VA  \\\n",
       "murders       454.0    0.0     560.0  ...    303.0    1681.0    34.0    355.0   \n",
       "rapes         324.0   36.0    3056.0  ...   1351.0    6976.0   432.0   1173.0   \n",
       "robberies    7107.0   78.0   27216.0  ...   7631.0   25285.0   774.0   6627.0   \n",
       "assaults     9003.0  145.0   47525.0  ...  12477.0   49564.0  1633.0   8009.0   \n",
       "burglaries  11532.0  251.0  108475.0  ...  30235.0  168969.0  7964.0  24315.0   \n",
       "\n",
       "state           VT       WA       WI      WV     WY      Crimes  \n",
       "murders        2.0    161.0    199.0    31.0    3.0     murders  \n",
       "rapes         41.0   1573.0    904.0   185.0   59.0       rapes  \n",
       "robberies     14.0   5480.0   5409.0   573.0   36.0   robberies  \n",
       "assaults      57.0  10825.0   3873.0  1165.0  365.0    assaults  \n",
       "burglaries  1048.0  34838.0  21077.0  4025.0  851.0  burglaries  \n",
       "\n",
       "[5 rows x 49 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_type_ber_state=crimedata.groupby(by='state')[['murders', 'rapes', 'robberies', 'assaults', 'burglaries', 'larcenies', 'autoTheft', 'arsons']] .sum()\n",
    "crime_type_ber_state_T = crime_type_ber_state.T\n",
    "crime_type_ber_state_T[\"Crimes\"]=['murders', 'rapes', 'robberies', 'assaults', 'burglaries', 'larcenies', 'autoTheft', 'arsons']\n",
    "crime_type_ber_state_T.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bar2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the 10 Cities with high crime rate?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "crime_type_ber_state_top=crimedata.groupby(by='state', as_index=False)[['murders', 'rapes', 'robberies', 'assaults', 'burglaries', 'larcenies', 'autoTheft', 'arsons']] .sum()\n",
    "crime_type_top = pd.DataFrame (type_of_criems, columns = ['crime_type'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mab 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Showing the distrbution for non-Violent Crimes ber population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "data1 = dict(type='choropleth',\n",
    "        colorscale = 'Viridis',\n",
    "        autocolorscale = False,\n",
    "        locations = crimedata_state['state'],\n",
    "        locationmode = 'USA-states',\n",
    "        z = crimedata_state['nonViolPerPop'].astype(float),\n",
    "        colorbar = {'title':'non-Violent Crimes'}\n",
    "        )\n",
    "layout1 = dict(\n",
    "        title = 'Aggregate view of non-Violent Crimes Per 100K Population',\n",
    "        geo = dict(\n",
    "            scope='usa',\n",
    "            projection=dict( type='albers usa' ),\n",
    "            showlakes = True,\n",
    "            lakecolor='rgb(85,173,240)'),\n",
    "                )\n",
    "    \n",
    "fig1 = go.Figure(data = [data1],layout = layout1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mab 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Showing the distrbution for Violent Crimes ber population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "data2 = dict(type='choropleth',\n",
    "        autocolorscale = False,\n",
    "        colorscale = \"Earth\",\n",
    "        locations = crimedata_state['state'],\n",
    "        locationmode = 'USA-states',\n",
    "        z = crimedata_state['ViolentCrimesPerPop'].astype('float'),\n",
    "        colorbar = {'title':'Violent Crimes'}\n",
    "        )\n",
    "layout2 = dict(\n",
    "        title = 'Aggregate view of Violent Crimes Per 100K Population across US',\n",
    "        geo = dict(\n",
    "            scope='usa',\n",
    "            projection=dict( type='albers usa' ),\n",
    "            showlakes = True,\n",
    "            lakecolor = 'rgb(85,173,240)'),\n",
    "\n",
    "             )\n",
    "    \n",
    "fig2 = go.Figure(data = [data2],layout = layout2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mab 3 and 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Showing the highest ceties with non-Violent  and Violent crimes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\BS\\AppData\\Local\\Temp/ipykernel_12032/1124230770.py:25: FutureWarning:\n",
      "\n",
      "pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#####thesecond graph cities\n",
    "# Let's find out the outliers in `ViolentCrimesPerPop` response variable and plot those to find cities with highest crime rate in the US\n",
    "quartile_1, quartile_3 = np.percentile(crimedata['ViolentCrimesPerPop'], [25, 75])\n",
    "iqr = quartile_3 - quartile_1\n",
    "lower_bound = quartile_1 - (iqr * 1.5)\n",
    "upper_bound = quartile_3 + (iqr * 1.5)\n",
    "outliers_viol = crimedata.loc[crimedata['ViolentCrimesPerPop']>upper_bound,['communityName','state','ViolentCrimesPerPop']]\n",
    "\n",
    "\n",
    "## Let's find out the outliers in `nonViolPerPop` response variable and plot those to find cities with highest crime rate in the US\n",
    "quartile_1, quartile_3 = np.percentile(crimedata['nonViolPerPop'], [25, 75])\n",
    "iqr = quartile_3 - quartile_1\n",
    "lower_bound = quartile_1 - (iqr * 1.5)\n",
    "upper_bound = quartile_3 + (iqr * 1.5)\n",
    "outliers_nviol = crimedata.loc[crimedata['nonViolPerPop']>upper_bound,['communityName','state','nonViolPerPop']]\n",
    "\n",
    "## Remove community Name(s) ending with \"city\". This helps dataframe(s) merging easier to get lat and lon\n",
    "outliers_viol['communityName'] = outliers_viol['communityName'].map(lambda result : re.sub(r'city','',result))\n",
    "outliers_nviol['communityName'] = outliers_nviol['communityName'].map(lambda result : re.sub(r'city','',result))\n",
    "\n",
    "## read citie.json file to get latitude and longitude details of the cities\n",
    "file = \"cities.json\"\n",
    "with open(file) as city_file:\n",
    "    dict_city = json.load(city_file)\n",
    "    cities_lat_lon = json_normalize(dict_city)\n",
    "\n",
    "## merge cities dataframe(with cities_lat_lon dataframe to get lat and lon of the cities) with outliers_viol dataframe \n",
    "##and outliers_nviol to plot cities with highest violent/non-vilolent crime rate\n",
    "\n",
    "violent_crime_cities = pd.merge(outliers_viol,cities_lat_lon,left_on=[\"communityName\",\"state\"],right_on=[\"city\",\"state\"])\n",
    "violent_crime_cities = violent_crime_cities.drop([\"city\"],axis=1)\n",
    "#print (violent_crime_cities)\n",
    "\n",
    "nonviolent_crime_cities = pd.merge(outliers_nviol,cities_lat_lon,left_on=[\"communityName\",\"state\"],right_on=[\"city\",\"state\"])\n",
    "nonviolent_crime_cities = nonviolent_crime_cities.drop([\"city\"],axis=1)\n",
    "#print (nonviolent_crime_cities)\n",
    "\n",
    "\n",
    "## Cities with highest  non-violent crime rate\n",
    "levels = [(0,20),(21,30),(31,40),(41,50),(51,80)]\n",
    "colors = ['rgb(255,133,27)','rgb(31,120,180)','rgb(178,223,138)','rgb(251,154,153)','rgb(227,26,28)']\n",
    "plot_data = []\n",
    "for i in range(len(levels)):\n",
    "    lim = levels[i]\n",
    "    nonviolent_crime_cities_sub = nonviolent_crime_cities[lim[0]:lim[1]]\n",
    "    city_outline = dict(\n",
    "        type = \"scattergeo\",\n",
    "        locationmode = 'USA-states',\n",
    "        lon = nonviolent_crime_cities_sub['longitude'],\n",
    "        lat = nonviolent_crime_cities_sub['latitude'],\n",
    "        text = nonviolent_crime_cities_sub['communityName'] +' '+ nonviolent_crime_cities_sub['nonViolPerPop'].astype(str),\n",
    "        mode = \"markers\",\n",
    "        marker = dict(\n",
    "        size = nonviolent_crime_cities_sub['nonViolPerPop']/800,\n",
    "        color = colors[i],\n",
    "        ),  \n",
    "    name = '{0} - {1}'.format(lim[0],lim[1])\n",
    "    )\n",
    "    layout1 = dict(\n",
    "        title = 'Cities with highest non-Violent Crime rate',\n",
    "        geo = dict(\n",
    "            scope='usa',\n",
    "            projection=dict( type='albers usa' ),\n",
    "            showlakes = True,\n",
    "            lakecolor = 'rgb(85,173,240)'), \n",
    "    )\n",
    "    plot_data.append(city_outline)\n",
    "    \n",
    "fig3= dict( data=plot_data, layout=layout1)\n",
    "    \n",
    "    \n",
    "## Cities with highest violent crime rate\n",
    "levels = [(0,30),(31,60),(61,90),(91,120),(121,170)]\n",
    "colors = ['rgb(175,175,50)','rgb(131,120,180)','rgb(78,230,138)','rgb(251,24,153)','rgb(227,126,28)']\n",
    "cities = []\n",
    "for i in range(len(levels)):\n",
    "    lim = levels[i]\n",
    "    violent_crime_cities_sub = violent_crime_cities[lim[0]:lim[1]]\n",
    "    city_outline = dict(\n",
    "        type = \"scattergeo\",\n",
    "        locationmode = 'USA-states',\n",
    "        lon = violent_crime_cities_sub['longitude'],\n",
    "        lat = violent_crime_cities_sub['latitude'],\n",
    "        text = violent_crime_cities_sub['communityName'] +' '+ violent_crime_cities_sub['ViolentCrimesPerPop'].astype(str),\n",
    "        mode = \"markers\",\n",
    "        marker = dict(\n",
    "        size = violent_crime_cities_sub['ViolentCrimesPerPop']/200,\n",
    "        color = colors[i]\n",
    "        ),  \n",
    "    name = '{0} - {1}'.format(lim[0],lim[1])\n",
    "    )\n",
    "    layout2 = dict(\n",
    "        title = 'Cities with highest Violent Crime rate',\n",
    "        geo = dict(\n",
    "            scope='usa',\n",
    "            projection=dict( type='albers usa' ),\n",
    "            showlakes = True,\n",
    "            lakecolor = 'rgb(85,173,240)'),\n",
    "    ) \n",
    "    cities.append(city_outline)\n",
    "    \n",
    "fig4= dict( data=cities, layout=layout2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BANS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "bans_style={'margin': 12,\n",
    "            'width': 150, \n",
    "            'border-radius': '80px',\n",
    "            \"border\": \"3px solid black\",\n",
    "            'backgroundColor': 'white', \n",
    "            'padding': 10, \n",
    "            'float': 'left',\"text-align\": \"left!important\"}\n",
    "\n",
    "bans_header_style={'fontSize': 18,\n",
    "              'color': 'gray',\n",
    "              \"text-align\": \"center\"}\n",
    "\n",
    "\n",
    "bans=dbc.Col(children=[\n",
    "        dbc.Row(children=[\n",
    "            \n",
    "            \n",
    "            dbc.Col(html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Larcenies', className='my-class', style=bans_header_style),\n",
    "            html.H5(f\"{larcenies_percentage:,.2f}%\", className='my-class', \n",
    "                    style={'color': '#19D3F3',\"text-align\": \"center\",\n",
    "                          'font-size': '36px','font-weight': 'bold'})],\n",
    "                 style=bans_style)),\n",
    "            \n",
    "            \n",
    "            dbc.Col(html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Burglaries', className='my-class', style=bans_header_style),\n",
    "            html.H5(f\"{burglaries_percentage:,.2f}%\", className='my-class', \n",
    "                    style={'color': '#FFA15A',\"text-align\": \"center\",\n",
    "                          'font-size': '36px','font-weight': 'bold'})],\n",
    "                 style=bans_style)),\n",
    "                      \n",
    "            \n",
    "            dbc.Col( html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('AutoTheft', className='my-class', style=bans_header_style),\n",
    "            html.H5(f\"{autoTheft_percentage:,.2f}%\", className='my-class', style=\n",
    "                    {'color': '#FF6692',\"text-align\": \"center\",\n",
    "                      'font-size': '36px','font-weight': 'bold'})],\n",
    "                 style=bans_style)),\n",
    "            \n",
    "            \n",
    "            \n",
    "            dbc.Col(html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Assaults', className='my-class', style=bans_header_style),\n",
    "            html.H5(f\"{assaults_percentage:,.2f}%\", className='my-class', \n",
    "                    style={'color': '#AB63FA',\"text-align\": \"center\",\n",
    "                          'font-size': '36px','font-weight': 'bold'})],\n",
    "                 style=bans_style)),\n",
    "    \n",
    "        ]), \n",
    "    \n",
    "    \n",
    "    dbc.Row(children=[\n",
    "        \n",
    "        \n",
    "            dbc.Col( html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Robberies', className='my-class', style=bans_header_style),\n",
    "            html.H5(f\"{robberies_percentage:,.2f}%\", className='my-class',\n",
    "                    style={'color': '#00CC96',\"text-align\": \"center\",\n",
    "                          'font-size': '36px','font-weight': 'bold'})],\n",
    "                 style=bans_style)),\n",
    "                      \n",
    "        \n",
    "            dbc.Col( html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Arsons', className='my-class', style=bans_header_style),\n",
    "            html.H5(f\"{arsons_percentage:,.2f}%\", className='my-class', \n",
    "                    style={'color': '#B6E880',\"text-align\": \"center\",\n",
    "                          'font-size': '36px','font-weight': 'bold'})],\n",
    "                 style=bans_style)),\n",
    "        \n",
    "        \n",
    "            dbc.Col( html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Rapes', className='my-class', style=bans_header_style),\n",
    "            html.H5(f\"{rapes_percentage:,.2f}%\", className='my-class',\n",
    "                    style={'color': '#EF553B',\"text-align\": \"center\",\n",
    "                           'font-size': '36px','font-weight': 'bold'})],\n",
    "                 style=bans_style)),\n",
    "        \n",
    "        \n",
    "             \n",
    "            dbc.Col(html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Murders', className='my-class',\n",
    "                    style=bans_header_style),\n",
    "            html.H5(f\"{murders_percentage:,.2f}%\", className='my-class', \n",
    "                    style={'color': '#959FF9',\"text-align\": \"center\",\n",
    "                          'font-size': '36px','font-weight': 'bold'})],\n",
    "                   style=bans_style)),\n",
    "            ])],\n",
    "             style={\"width\":\"60%\",\"align-items\":\"center\" ,'display': 'inline-block'})\n",
    "\n",
    "circle=html.Div(className=\"graphs-summary\", children=[\n",
    "    dbc.Row(children=[\n",
    "    dbc.Col(html.Div(className=\"summary-1\", children=[\n",
    "            html.H6('Total Crimes', className='my-class',\n",
    "                    style={'fontSize': 28,\n",
    "                           'color': 'gray',\n",
    "                           \"padding-top\": \"28px\"}),\n",
    "        \n",
    "            html.H5(total_crime, className='my-class', \n",
    "                    style={'color': '#FFA15A',\"text-align\": \"center\",\n",
    "                          'font-size': '52px','font-weight': 'bold'})],\n",
    "                     \n",
    "                 style={'margin': 12,\n",
    "                        'width': \"200px\",\n",
    "                        \"border\": \"3px solid black\",\n",
    "                        \"height\":\"200px\",\n",
    "                        'border-radius': '200px'\n",
    "                        ,'backgroundColor': 'white', \n",
    "                        'float': 'left', 'padding': 14,\n",
    "                        \"text-align\": \"center\",\n",
    "                         'margin-top': '-40px'}),\n",
    "  \n",
    "            \n",
    "            )])],style={\"width\":\"18%\",\n",
    "                        \"height\":\"237px\", \n",
    "                        'display': 'inline-block',\n",
    "                        \"padding-left\": \"218px\"})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Putting the graph to DashBoard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<dash.dash.Dash at 0x1f58d7ea820>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "app = dash.Dash(name=\" UCI Crime and Communities\",external_stylesheets=['https://codepen.io/chriddyp/pen/bWLwgP.css',\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"])\n",
    "app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "st_border={ \"border\": \"10px solid #a95b0c\",\n",
    " \"border-radius\": \"22px\",\n",
    "  \"margin\": \"9px 7px\"}\n",
    "\n",
    "\n",
    "bars=html.Div(children=[html.Div(className=\"summary-1\", children=[\n",
    "                dcc.Dropdown(\n",
    "                id=\"dropdown2\",\n",
    "                options = [{'label': str(crime_type), \n",
    "                            'value': str(crime_type)} for crime_type in crime_type_top['crime_type'].unique()],\n",
    "                value=\"murders\",\n",
    "                clearable=False,\n",
    "                style={\"margin-bottom\": \"10px\"}\n",
    "                ),\n",
    "                dcc.Graph(id=\"graph2\",style=st_border),],style={'width': '49%', \n",
    "                                                                'display': 'inline-block',\n",
    "              'vertical-align': 'middle', \"padding\": \"40px 10px 10px 0px\"},),           \n",
    "            html.Div(className=\"summary-1\", children=[\n",
    "                dcc.Dropdown(\n",
    "                id=\"dropdown1\",\n",
    "                options = [{'label': str(state), 'value': str(state)} for state in crimedata['state'].unique()],\n",
    "                value=\"TX\",\n",
    "                clearable=False,\n",
    "                style={\"margin-bottom\": \"10px\"}),\n",
    "                dcc.Graph(id=\"graph1\",style=st_border),],style={'width': '49%', \n",
    "                               'display': 'inline-block', \n",
    "                                'vertical-align': 'middle',\n",
    "                                \"padding\":\"40px 10px 10px 0px\"},)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "maps=html.Div(children=[\n",
    "            html.Div(className=\"summary-1\", children=[\n",
    "            dcc.Graph(\n",
    "                id='example-map',\n",
    "                className='six column',\n",
    "                figure=fig1\n",
    "                ),],\n",
    "                      style={'width': '48%', \n",
    "                            'display': 'inline-block', \n",
    "                            \"border\": \"10px solid #a95b0c\",\n",
    "                            \"border-radius\": \"22px\",\n",
    "                            \"margin\": \"24px 0px 10px 0px\"},),\n",
    "\n",
    "                        \n",
    "            html.Div(className=\"summary-1\", children=[\n",
    "                dcc.Graph(\n",
    "                className='six column',\n",
    "                figure=fig2\n",
    "                ),],\n",
    "                     style={'width': '48%',\n",
    "                            'display': 'inline-block',\n",
    "                            \"border\": \"10px solid #a95b0c\",\n",
    "                             \"border-radius\": \"22px\",\n",
    "                              \"margin\":\"24px 0px 10px 12px\"}),\n",
    "                        \n",
    "                        \n",
    "            html.Div(className=\"summary-1\", children=[\n",
    "                dcc.Graph(\n",
    "                className='six column',\n",
    "                figure=fig3\n",
    "                ),],style={'width': '48%', \n",
    "                            'display': 'inline-block', \n",
    "                            \"border\": \"10px solid #a95b0c\",\n",
    "                            \"border-radius\": \"22px\",\n",
    "                            \"margin\": \"24px 0px 10px 0px\"}),\n",
    "                        \n",
    "                        \n",
    "                        \n",
    "                        \n",
    "            html.Div(className=\"summary-1\", children=[\n",
    "                dcc.Graph(\n",
    "                className='six column',\n",
    "                figure=fig4\n",
    "                ),],style={'width': '48%',\n",
    "                            'display': 'inline-block',\n",
    "                            \"border\": \"10px solid #a95b0c\",\n",
    "                             \"border-radius\": \"22px\",\n",
    "                              \"margin\":\"24px 0px 10px 12px\"})\n",
    "                       ])\n",
    "                \n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1f58d7e5280>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "title_style={   'text-align': 'center',\n",
    "                'margin-bottom': '0px',\n",
    "                'font-size': '80px',\n",
    "                'font-weight': 'bold',\n",
    "                'padding-top': '20px',\n",
    "                'padding-bottom': '61px',\n",
    "                'color': \"#a95b0c\"}\n",
    "\n",
    "\n",
    "app.layout = html.Div([\n",
    "                    html.Div([\n",
    "            html.Div([\n",
    "                html.H3(\"UCI Crime and Communities\", style=title_style),\n",
    "                ])\n",
    "        ], className=\"six column\", id=\"title\"),\n",
    "    #################################################################################################################\n",
    "     # Summary Div Design\n",
    "    html.Div(className=\"graphs-summary\", children=[ circle,\n",
    "        bans\n",
    "         ,html.Div(style={'width': '100%', \n",
    "                          \"border\": \"1px solid #a95b0c\",\n",
    "                          \"margin\": \"24px 0px 10px 0px\"} )                                        \n",
    "      ,bars,\n",
    "       maps\n",
    "    ]),])\n",
    "    \n",
    "\n",
    "@app.callback(\n",
    "    Output(\"graph1\", \"figure\"), \n",
    "    Input(\"dropdown1\", \"value\"))\n",
    "def update_bar_chart(state):\n",
    "    df = crime_type_ber_state_T # replace with your own data source\n",
    "    mask =df[state]\n",
    "    fig1 = px.bar(df, x=\"Crimes\", y=mask, text_auto=True,color=\"Crimes\")\n",
    "    fig1.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', xaxis_tickangle=-90,\\\n",
    "                   title={'text': 'Crimes Precentage by State','y':0.96,'x':0.5, 'xanchor': 'center','yanchor': 'top'})\n",
    "  \n",
    "    return fig1\n",
    "\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"graph2\", \"figure\"), \n",
    "    Input(\"dropdown2\", \"value\"))\n",
    "def update_bar_chart(crime):\n",
    "    df =crime_type_ber_state_top.sort_values(by=crime ,ascending=False)[0:10] # replace with your own data source\n",
    "    mask = df[crime] \n",
    "    fig2 = px.bar(df, x=\"state\", y=mask , text_auto=True,color=mask)\n",
    "    fig2.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', xaxis_tickangle=-90,\\\n",
    "                   title={'text': 'Top 10 State','y':0.96,'x':0.5, 'xanchor': 'center','yanchor': 'top'})\n",
    "    return fig2\n",
    "\n",
    "\n",
    "app.run_server()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
